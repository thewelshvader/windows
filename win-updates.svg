<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 8.0.5 (20230430.1635)
 --><!-- Pages: 1 --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1268pt" height="44pt" viewBox="0.00 0.00 1268.39 44.00" id="svg">
<script type="text/javascript" href="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js" id="jquery"/><script type="text/javascript" id="my_javascript"><![CDATA[/**
 * This file contains the functions responsible to highlight the plays, roles and tasks when rendering the SVG file in a browser
 * or any SVG reader that support Javascript.
 */

/**
 * The name of the CSS class for highlighted elements
 * @type {string}
 */
const HIGHLIGHT_CLASS = "highlight";

/**
 * The current selected element on the graph
 * @type {null}
 */
let currentSelectedElement = null;

/**
 * Highlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 */
function highlightLinkedNodes(parentElement, visitedElements = []) {
    $(parentElement).find('link').each(function (index, element) {
        const linkedElementId = $(element).attr('target');
        const edgeId = $(element).attr('edge');

        const currentElement = $(`#${linkedElementId}`);
        currentElement.addClass(HIGHLIGHT_CLASS);

        // Highlight the edge point to the target
        $(`#${edgeId}`).addClass(HIGHLIGHT_CLASS);

        if (!visitedElements.includes(linkedElementId)) {
            visitedElements.push(linkedElementId);
            // Recursively highlight
            highlightLinkedNodes(currentElement, visitedElements);
        }
    })
}


/**
 * Unhighlight the linked nodes of the given root element
 * @param {Element} parentElement
 * @param {string[]} visitedElements
 * @param {boolean} isHover True when we are coming from a mouseleave event. In that case, we should not unhighlight if
 * the parentElement is the current selected element
 */
function unHighlightLinkedNodes(parentElement, visitedElements = [], isHover) {
    const currentSelectedElementId = $(currentSelectedElement).attr('id');
    // Do not unhighlight the current selected element
    if ($(parentElement).attr('id') !== currentSelectedElementId || !isHover) {

        $(parentElement).find('link').each(function (index, element) {
            const linkedElementId = $(element).attr('target');
            const edgeId = $(element).attr('edge');

            const linkedElement = $(`#${linkedElementId}`);

            if (linkedElement.attr('id') !== currentSelectedElementId) {
                linkedElement.removeClass(HIGHLIGHT_CLASS);

                // Unhighlight the edge point to the target
                $(`#${edgeId}`).removeClass(HIGHLIGHT_CLASS);

                if (!visitedElements.includes(linkedElementId)) {
                    visitedElements.push(linkedElementId);
                    // Recursively unhighlight
                    unHighlightLinkedNodes(linkedElement, visitedElements, isHover);
                }
            }

        })
    }

}

/**
 * Hover handler for mouseenter event
 * @param {Event} event
 */
function hoverMouseEnter(event) {
    highlightLinkedNodes(event.currentTarget, []);
}

/**
 * Hover handler for mouseleave event
 * @param {Event} event
 */
function hoverMouseLeave(event) {
    unHighlightLinkedNodes(event.currentTarget, [], true);
}

/**
 * Handler when clicking on some elements
 * @param {Event} event
 */
function clickOnElement(event) {
    const newClickedElement = $(event.currentTarget);

    event.preventDefault(); // Disable the default click behavior since we override it here

    if (newClickedElement.attr('id') === $(currentSelectedElement).attr('id')) { // clicking again on the same element
        newClickedElement.removeClass(HIGHLIGHT_CLASS);
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        currentSelectedElement = null;
    } else { // clicking on a different node

        // Remove highlight from all the nodes linked to the current selected node
        unHighlightLinkedNodes(currentSelectedElement, [], false);
        if (currentSelectedElement) {
            currentSelectedElement.removeClass(HIGHLIGHT_CLASS);
        }

        newClickedElement.addClass(HIGHLIGHT_CLASS);
        highlightLinkedNodes(newClickedElement, []);
        currentSelectedElement = newClickedElement;
    }
}

/**
 * Handler when double clicking on some elements
 * @param {Event} event
 */
function dblClickElement(event) {
    const newElementDlbClicked = event.currentTarget;
    const links = $(newElementDlbClicked).find("a[xlink\\:href]");

    if (links.length > 0) {
        document.location = $(links[0]).attr("xlink:href");
    } else {
        console.log("No links found on this element");
    }
}


$("#svg").ready(function () {
    let playbooks = $("g[id^=playbook_]");
    let plays = $("g[id^=play_]");
    let roles = $("g[id^=role_]");
    let blocks = $("g[id^=block_]");
    let tasks = $("g[id^=pre_task_], g[id^=task_], g[id^=post_task_]");

    playbooks.hover(hoverMouseEnter, hoverMouseLeave);
    playbooks.click(clickOnElement);
    playbooks.dblclick(dblClickElement);

    // Set hover and click events on the plays
    plays.hover(hoverMouseEnter, hoverMouseLeave);
    plays.click(clickOnElement);
    plays.dblclick(dblClickElement);

    // Set hover and click events on the roles
    roles.hover(hoverMouseEnter, hoverMouseLeave);
    roles.click(clickOnElement);
    roles.dblclick(dblClickElement);

    // Set hover and click events on the blocks
    blocks.hover(hoverMouseEnter, hoverMouseLeave);
    blocks.click(clickOnElement);
    blocks.dblclick(dblClickElement);

    // Set hover and click events on the tasks
    tasks.hover(hoverMouseEnter, hoverMouseLeave);
    tasks.click(clickOnElement);
    tasks.dblclick(dblClickElement);

});
]]></script><style type="text/css" id="my_css"><![CDATA[/**
 Hover on nodes, edges, path and polygon
 */
.node:hover, .edge:hover, path:hover, path + polygon:hover {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}

/**
 Manually added class by the script highlight-hover.js when hovering on plays and roles
 */
.highlight {
    cursor: pointer;
    stroke-width: 3;
    font-weight: bolder;
}
]]></style><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<polygon fill="white" stroke="none" points="-4,4 -4,-40 1264.39,-40 1264.39,4 -4,4"/>
<!-- playbook_5bcde4a6 -->
<g id="playbook_5bcde4a6" class="node">
<title>playbook_5bcde4a6</title>
<g id="a_playbook_5bcde4a6"><a xlink:href="/Users/kevindelaney/Source/windows/playbooks/win-updates.yml" xlink:title="playbooks/win-updates.yml">
<ellipse fill="none" stroke="black" stroke-dasharray="1,5" cx="113.79" cy="-18" rx="113.79" ry="18"/>
<text text-anchor="middle" x="113.79" y="-12.95" font-family="Times,serif" font-size="14.00">playbooks/win-updates.yml</text>
</a>
</g>
<links><link target="play_bc3b1572" edge="edge_1_playbook_5bcde4a6_play_bc3b1572"/></links></g>
<!-- play_bc3b1572 -->
<g id="play_bc3b1572" class="node">
<title>play_bc3b1572</title>
<g id="a_play_bc3b1572"><a xlink:href="/Users/kevindelaney/Source/windows/playbooks/win-updates.yml" xlink:title="Play: Install Windows Updates (0)">
<polygon fill="#6e7359" stroke="#6e7359" points="665.08,-36 461.58,-36 461.58,0 665.08,0 665.08,-36"/>
<text text-anchor="middle" x="563.33" y="-12.95" font-family="Times,serif" font-size="14.00" fill="#ffffff">Play: Install Windows Updates (0)</text>
</a>
</g>
<links><link target="task_1fe2f34b" edge="edge_1_play_bc3b1572_task_1fe2f34b"/></links></g>
<!-- playbook_5bcde4a6&#45;&gt;play_bc3b1572 -->
<g id="edge_playbook_5bcde4a6_play_bc3b1572" class="edge">
<title>playbook_5bcde4a6-&gt;play_bc3b1572</title>
<g id="a_edge_playbook_5bcde4a6_play_bc3b1572"><a xlink:title="1 Play: Install Windows Updates (0)">
<path fill="none" stroke="#6e7359" d="M228.01,-18C296.23,-18 382.74,-18 450.67,-18" id="path_edge_playbook_5bcde4a6_play_bc3b1572"/>
<polygon fill="#6e7359" stroke="#6e7359" points="450.41,-21.5 460.41,-18 450.41,-14.5 450.41,-21.5"/>
</a>
</g>
<g id="a_edge_playbook_5bcde4a6_play_bc3b1572-label"><a xlink:title="1 Play: Install Windows Updates (0)">
<text text-anchor="middle" font-family="Times,serif" font-size="14.00" fill="#6e7359" dy="-0.2%"><textPath xlink:href="#path_edge_playbook_5bcde4a6_play_bc3b1572" startOffset="134.22160000000002">1 Play: Install Windows Updates (0)</textPath></text>
</a>
</g>
</g>
<!-- task_1fe2f34b -->
<g id="task_1fe2f34b" class="node">
<title>task_1fe2f34b</title>
<g id="a_task_1fe2f34b"><a xlink:href="/Users/kevindelaney/Source/windows/playbooks/win-updates.yml" xlink:title="Install specific updates based on the KBs for those updates">
<polygon fill="none" stroke="#6e7359" points="1260.39,-10.54 1260.39,-25.46 1099.65,-36 872.33,-36 711.58,-25.46 711.58,-10.54 872.33,0 1099.65,0 1260.39,-10.54"/>
<text text-anchor="middle" x="985.99" y="-12.95" font-family="Times,serif" font-size="14.00">[task] Install specific updates based on the KBs for those updates</text>
</a>
</g>
</g>
<!-- play_bc3b1572&#45;&gt;task_1fe2f34b -->
<g id="edge_1_play_bc3b1572_task_1fe2f34b" class="edge">
<title>play_bc3b1572-&gt;task_1fe2f34b</title>
<g id="a_edge_1_play_bc3b1572_task_1fe2f34b"><a xlink:title="1 ">
<path fill="none" stroke="#6e7359" d="M665.36,-18C676.55,-18 688.3,-18 700.44,-18" id="path_edge_1_play_bc3b1572_task_1fe2f34b"/>
<polygon fill="#6e7359" stroke="#6e7359" points="700.2,-21.5 710.2,-18 700.2,-14.5 700.2,-21.5"/>
</a>
</g>
<g id="a_edge_1_play_bc3b1572_task_1fe2f34b-label"><a xlink:title="1 ">
<text text-anchor="middle" font-family="Times,serif" font-size="14.00" fill="#6e7359" dy="-0.2%"><textPath xlink:href="#path_edge_1_play_bc3b1572_task_1fe2f34b" startOffset="24.66080000000003">1 </textPath></text>
</a>
</g>
</g>
</g>
</svg>